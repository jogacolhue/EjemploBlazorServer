@page "/login"
@using Data
@using EjemploBlazorServer.Shared.Modelos
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Servicios.IUsuarioServicio usuarioServicio

<EditForm Model="@usuario" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Login</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="usuario.UserName" placeholder="usuario" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="usuario.Password" placeholder="clave" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {

    private Usuario usuario;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        usuario = new Usuario();
        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {

        var returnedUser = await usuarioServicio.LoginAsync(usuario);

        if (returnedUser?.UserName != null)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            LoginMesssage = "Usuario o clave inválido.";
        }

        await sessionStorage.SetItemAsync("userName", usuario.UserName);

        return await Task.FromResult(true);
    }

}